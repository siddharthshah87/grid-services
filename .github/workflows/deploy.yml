name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (e.g., dev, prod)"
        required: true
        default: "dev"

env:
  TF_VERSION: 1.9.0
  AWS_REGION: us-west-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: ☁️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: 🐍 Build & Push OpenLEADR VTN
        run: ./openleadr/build_and_push.sh

      - name: ⚡ Build & Push Volttron VEN
        run: ./volttron/build_and_push.sh

      - name: 🧠 Build & Push OpenADR Backend
        run: ./openadr_backend/build_and_push.sh

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 📂 Terraform Init
        run: terraform init -input=false
        working-directory: envs/${{ github.event.inputs.environment }}

      - name: ✅ Terraform Validate
        run: terraform validate
        working-directory: envs/${{ github.event.inputs.environment }}

      - name: 🔄 Terraform Import (if applicable)
        env:
          CI: "true"
        run: ./terraform_import.sh
        working-directory: envs/${{ github.event.inputs.environment }}
        shell: bash

      - name: 📜 Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan
        working-directory: envs/${{ github.event.inputs.environment }}

      - name: 🚀 Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: envs/${{ github.event.inputs.environment }}

      - name: ⏳ Wait for ECS services to become healthy
        run: sleep 30

      - name: 🔍 Fetch ALB URLs & Check Health
        run: |
          terraform output -json > tf_output.json

          get_output() {
            jq -r ".$1.value" tf_output.json
          }

          check_url() {
            local url="$1"
            local name="$2"
            local retries=5
            local delay=15
            echo "🔍 Checking $name at $url/health..."
            for i in $(seq 1 $retries); do
              if curl -fsS --max-time 5 "http://$url/health" > /dev/null; then
                echo "✅ $name is healthy."
                return 0
              else
                echo "❌ $name not ready (try $i/$retries)..."
                sleep $delay
              fi
            done
            echo "❌ $name failed health check after $retries attempts."
            return 1
          }

          OPENLEADR_URL=$(get_output openleadr_alb_dns_name)
          VOLTTRON_URL=$(get_output volttron_alb_dns_name)
          BACKEND_URL=$(get_output backend_alb_dns_name)

          echo "### 🌐 Deployed ALB URLs" >> $GITHUB_STEP_SUMMARY
          echo "- OpenLEADR VTN: [http://$OPENLEADR_URL](http://$OPENLEADR_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- Volttron VEN:  [http://$VOLTTRON_URL](http://$VOLTTRON_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- Backend API:   [http://$BACKEND_URL](http://$BACKEND_URL)" >> $GITHUB_STEP_SUMMARY

          check_url "$OPENLEADR_URL" "OpenLEADR VTN"
          check_url "$VOLTTRON_URL" "Volttron VEN"
          check_url "$BACKEND_URL" "Backend API"
        working-directory: envs/${{ github.event.inputs.environment }}
